# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: ubuntu-latest
        #     c_compiler: cc
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            makeFileType: "MinGW Makefiles"
            curllibCommand: > 
              curl -o curl.zip https://curl.se/windows/dl-8.7.1_7/curl-8.7.1_7-win64-mingw.zip && 
              mkdir curlLib && tar -xf curl.zip -C curlLib --strip-components=1 && 
              mv curlLib\bin\libcurl-x64.dll 'curlLib\bin\libcurl-d.dll' &&
              mv curlLib\bin\libcurl-x64.def 'curlLib\bin\libcurl-d.def' && 
              mv curlLib\lib\* 'C:\mingw64\lib\' && 
              mv curlLib\bin\* 'C:\mingw64\bin\' && 
              mv curlLib\include\* 'C:\mingw64\include\' &&
              mv curlLib\dep\* 'C:\mingw64\dep\'
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            makeFileType: "Unix Makefiles"
            curllibCommand: >
              sudo apt update && 
              sudo apt install curl && 
              sudo apt install libcurl4-openssl-dev && 
              sudo apt-get install build-essential

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Deps
      run: ${{ matrix.curllibCommand }}
      
    - name: Choco Install Deps
      uses: crazy-max/ghaction-chocolatey@v3.0.0
      with:
        args: install curl
    
    - name: Init Submodules
      run: git submodule update --init --recursive
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }} -G"${{ matrix.makeFileType }}" --debug-find

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target all

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: plex-yt-dlp-${{ matrix.os }}-${{ matrix.build_type }}  # Customizable names
        path: ${{ steps.strings.outputs.build-output-dir }}/plex-yt-dlp*